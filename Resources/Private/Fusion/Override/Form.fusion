prototype(Neos.Form.Builder:Form) {
    renderingOptions {
        submitButtonLabel = ${q(node).property('submitLabel')}
    }
}

prototype(Neos.Form.Builder:FormElement.Definition) {
    properties {
        hideLabels = ${q(node).property('hideLabels')}
        floatingLabels = ${q(node).property('floatingLabels')}
    }
}

prototype(NeosRulez.Bootstrap.FormBuilder:Content.NodeBasedForm) < prototype(Neos.Neos:ContentComponent) {

    form = Neos.Form.Builder:NodeBasedForm {
        @context.formFusionPath = ${this.path}
        identifier = ${node.properties.identifier ? node.properties.identifier : 'form-' + node.identifier}
        presetName = ${node.properties.preset ? node.properties.preset : 'default'}
        formElementType = ${node.context.inBackend ? 'Neos.Form:FormEditMode' : 'Neos.Form:Form'}

        renderCallbacks.formElementWrapping = Neos.Form.Builder:FormElementWrapping {
            @if.isInBackend = ${node.context.inBackend}
        }

        firstPage {
            label = ${node.properties.label}
            renderingOptions._node = ${node}
            renderingOptions._fusionPath = ${formFusionPath}
            elements = Neos.Form.Builder:NodeBasedElementCollection {
                collection = ${q(node).children('elements').children()}
            }
        }
        furtherPages = Neos.Form.Builder:NodeBasedPageCollection {
            collection = ${q(node).children('furtherPages').children()}
        }
        finishers = Neos.Form.Builder:NodeBasedFinisherCollection {
            collection = ${q(node).children('finishers').children()}
        }
        @process.contentElementWrapping = Neos.Neos:ContentElementWrapping {
            additionalAttributes {
                'data-_neos-form-builder-type' = ${node.nodeType.name}
            }
        }
    }

    renderer = afx`
        <NeosRulez.Bootstrap:Component.AbstractContent>
            {props.form}
        </NeosRulez.Bootstrap:Component.AbstractContent>
    `
}
